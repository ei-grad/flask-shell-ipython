name: Release

on:
  push:
  pull_request:

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
    - name: Install build
      run: pip install build
    - name: Build distribution
      run: python -m build .
    - name: File list
      run: tar tf dist/*.tar.gz && unzip -l dist/*.whl
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test:
    name: Run tests
    needs: build
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13.0-rc.1"]
        os: [ubuntu-latest, macos-13, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download artifacts
      uses: actions/download-artifact@v4
    - name: Install wheel
      shell: bash
      run: pip install dist/*.whl
    - name: Make it use package from wheel
      shell: bash
      run: rm flask_shell_ipython.py
    - name: Install test requirements
      run: pip install -r requirements-test.txt
    - name: Test
      if: runner.os != 'Windows'
      run: pytest --forked
    - name: Test (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: pytest --collect-only -q | grep ^test_ | while read testname; do pytest -q $testname; done

  pypi-publish-test:
    name: Release on Test PyPI
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: Test PyPI
      url: "https://test.pypi.org/project/flask-shell-ipython/"
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: "https://test.pypi.org/legacy/"

  github-release:
    name: Release on GitHub
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/test-v')
    runs-on: ubuntu-latest
    environment:
      name: GitHub
      url: "https://github.com/ei-grad/flask-shell-ipython/releases/"
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Extract Version from Tag
        run: echo "VERSION_FROM_GIT_REF=${GITHUB_REF#refs/heads/test-v}" >> $GITHUB_ENV
      - name: Extract Version from pyproject.toml
        run: |
          pip install toml
          VERSION_FROM_PYPROJECT=$(python << EOF
          import toml
          print(toml.load('pyproject.toml')['project']['version'])
          EOF
          )
          echo "VERSION_FROM_PYPROJECT=$VERSION_FROM_PYPROJECT" >> $GITHUB_ENV
      - name: Ensure version consistency
        run: |
          if [ "$VERSION_FROM_GIT_REF" != "$VERSION_FROM_PYPROJECT" ]; then
            echo "Error: Version from tag ($VERSION_FROM_GIT_REF) does not match version in pyproject.toml ($VERSION_FROM_PYPROJECT)"
            exit 1
          fi
          echo VERSION=$VERSION_FROM_GIT_REF >> $GITHUB_ENV
      - name: Extract changelog for release notes
        run: |
          (
            echo "CHANGELOG<<EOF"
            awk -v version="$VERSION" '{
                if ($0 ~ "^## \\[" version "\\]") inSection = 1;
                else if ($0 ~ "^## \\[" && inSection) inSection = 0;
                if (inSection) print $0;
            }' CHANGELOG.md
            echo "EOF"
          ) >> $GITHUB_ENV
      - name: Validate changelog content
        run: |
          if [ -z "$CHANGELOG" ] ; then
            echo "Missing CHANGELOG.md section for release $VERSION"
            exit 1
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: dist/*
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create "$VERSION"
          --draft
          --notes "$CHANGELOG"
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload "$VERSION" dist/**

  pypi-publish:
    name: Release on PyPI
    needs: github-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: "https://pypi.org/project/flask-shell-ipython/"
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
